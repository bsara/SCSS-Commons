////
/// @author Brandon Sara (http://bsara.github.io)
////



//----------------------------------------------------------------------------------//
// Functions                                                                        //
//----------------------------------------------------------------------------------//

/// Adds a slash (`\`) to the beginning of the given value.
///
/// @param $value - Value on which to prepend a slash.
/// @returns {String} `$value` prepended with a `\` character.
///
/// @example
///   // Usage:
///   content: prepend-slash(2716);
///
///   // Output:
///   content: "\2716";
@function prepend-slash($value) {
  @return unquote("\"\\#{$value}\"");
}


/// Processes browser prefixes to be used when generating vendor
/// prefix versions of properties for functions.
///
/// @param {String} $browser-prefix - The browser prefix to process.
/// @returns {String} `$browser-prefix` wrapped in dashes (`-`). If `$browser-prefix`
///                   is an empty string, then an empty string is returned.
///
/// @example
///   // Usage:
///   #{process-browser-prefix('webkit')}user-select: none;
///   #{process-browser-prefix('')}user-select: none;
///
///   // Output:
///   -webkit-user-select: none;
///   user-select: none;
@function process-browser-prefix($browser-prefix) {
  @if $browser-prefix != $string-empty {
    @return '-#{$browser-prefix}-';
  }
  @return $string-empty;
}


/// Adds a percent sign (`%`) to the given number.
///
/// @param {Number} $num - Value to add `%` sign to.
/// @returns {Percent} `$num` witha `%` appended to it.
///
/// @example
///   // Usage:
///   width: add-percent-sign(42);
///
///   // Output:
///   width: 42%;
@function add-percent-sign($num) {
  @return $num * 1%;
}


/// Gets the percentage that the given `$num-of-pieces` is out of 100.
///
/// @param {Number} $num-of-pieces - Represents the number of times you are dividing
///                                  something (I.E. number of pieces of a whole).
/// @returns {Percent} A percentage value of `100 / $num-of-pieces`.
///
/// @requires {function} add-percent-sign
///
/// @example
///   // Usage:
///   width: percentage-of-pieces(5);
///   height: percentage-of-pieces(3);
///
///   // Output:
///   width: 20%;
///   height: 33.33333%;
@function percentage-of-pieces($num-of-pieces) {
  @return add-percent-sign(100 / $num-of-pieces);
}



//----------------------------------------------------------------------------------//
// Mixins                                                                           //
//----------------------------------------------------------------------------------//


/// Generates the property `appearance` as well as each necessary
/// vendor prefix.
///
/// @param $val - The value of the appearance property.
@mixin appearance($val) {
  -webkit-appearance: $val;
  -moz-appearance: $val;
  appearance: $val;
}



/// Generates the property `box-shadow` as well as each necessary
/// vendor prefix.
///
/// @param $vals... - The value(s) of the box-shadow property.
@mixin box-shadow($vals...) {
  -webkit-box-shadow: $vals;
  -moz-box-shadow: $vals;
  box-shadow: $vals;
}


/// Generates the property `box-sizing` as well as each necessary
/// vendor prefix.
///
/// @param $val - The value of the box-sizing property.
@mixin box-sizing($val) {
  -webkit-box-sizing: $val;
  -moz-box-sizing: $val;
  box-sizing: $val;
}


/// Sets the cursor to a pointer with cross browser compatibility.
@mixin cursor-pointer() {
  // scss-lint:disable DuplicateProperty
  cursor: pointer;
  cursor: hand;
}


/// Generates the property `filter` as well as each necessary
/// vendor prefix.
///
/// @param $val - The value of the filter property.
@mixin filter($val) {
  -webkit-filter: $val;
  filter: $val;
}


/// Adds sensible default property values for an element displaying a
/// font icon.
///
/// For a good example of font icons, refer to http://fontawesome.io.
///
/// (**Note:** The `font-family` property is NOT set by this mixin).
///
/// @requires {function} font-smoothing
@mixin font-icon-defaults() {
  // scss-lint:disable DeclarationOrder
  font: {
    size: inherit;
    style: normal;
    variant: normal;
    weight: normal;
  }
  line-height: 1;
  text-rendering: auto;
  @include font-smoothing(antialiased);
  transform: translate(0, 0);
  speak: none;
}


/// Generates the property `font-smoothing` as well as each necessary
/// vendor prefix.
///
/// @param $val - The value of the font-smoothing property.
@mixin font-smoothing($val) {
  $moz-val: $val;

  @if ($val == antialiased) {
    $moz-val: grayscale;
  } @else if ($val != none) {
    $moz-val: auto;
  }

  -webkit-font-smoothing: $val;
  -moz-osx-font-smoothing: $moz-val;
}


/// Generates the given property with a `linear-gradient` value
/// as well as each necessary vendor prefix for that value.
///
/// @param {String} $property - The property to generate.
/// @param $vals... - The value(s) to pass to the `linear-gradient` function.
///
/// @example
///   // Usage:
///   @include linear-gradient(background, left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%)
///
///   // Output:
///   background: -webkit-linear-gradient(left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%);
///   background: -moz-linear-gradient(left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%);
///   background: -ms-linear-gradient(left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%);
///   background: -o-linear-gradient(left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%);
///   background: linear-gradient(left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%);
@mixin linear-gradient($property, $vals...) {
  #{$property}: -webkit-linear-gradient($vals);
  #{$property}: -moz-linear-gradient($vals);
  #{$property}: -ms-linear-gradient($vals);
  #{$property}: -o-linear-gradient($vals);
  #{$property}: linear-gradient($vals);
}


/// Generates the property `opacity` as well as each necessary
/// vendor prefix.
///
/// @param $val - The value of the opacity property.
@mixin opacity($val) {
  -khtml-opacity: $val;
  -moz-opacity: $val;
  opacity: $val;
}



/// Sets `left` and `right` to the same value.
///
/// @param $val - Position value.
@mixin position-sides($val) {
  left: $val;
  right: $val;
}


/// Sets `top` and `bottom` to the same value.
///
/// @param $val - Position value.
@mixin position-top-bottom($val) {
  top: $val;
  bottom: $val;
}


/// Causes element(s) to be completely absent from print media.
/// @see %remove-from-print
@mixin remove-from-print() {
  @media print {
    display: none !important;
  }
}


/// Generates the given property with a `repeating-linear-gradient` value
/// as well as each necessary vendor prefix for that value.
///
/// @param {String} $property - The property to generate.
/// @param $vals... - The value(s) to pass to the `repeating-linear-gradient` function.
///
/// @example
///   // Usage:
///   @include repeating-linear-gradient(color, left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%)
///
///   // Output:
///   color: -webkit-repeating-linear-gradient(left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%);
///   color: -moz-repeating-linear-gradient(left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%);
///   color: -ms-repeating-linear-gradient(left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%);
///   color: -o-repeating-linear-gradient(left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%);
///   color: repeating-linear-gradient(left, #ff0 0%, #f00 50%, #000 51%, #222 71%, #fff 100%);
@mixin repeating-linear-gradient($property, $vals...) {
  #{$property}: -webkit-repeating-linear-gradient($vals);
  #{$property}: -moz-repeating-linear-gradient($vals);
  #{$property}: -ms-repeating-linear-gradient($vals);
  #{$property}: -o-repeating-linear-gradient($vals);
  #{$property}: repeating-linear-gradient($vals);
}


/// Sets `width` and `height` to the same value.
///
/// @param $val - Size value.
@mixin size($val) {
  width: $val;
  height: $val;
}


/// Generates the property `text-size-adjust` as well as each necessary
/// vendor prefix.
///
/// @param $val - The value of the text-size-adjust property.
@mixin text-size-adjust($val) {
  -webkit-text-size-adjust: $val;
  -moz-text-size-adjust: $val;
  -ms-text-size-adjust: $val;
  text-size-adjust: $val;
}


/// Generates the property `transform` as well as each necessary
/// vendor prefix.
///
/// @param $val - The value of the transform property.
@mixin transform($val) {
  -webkit-transform: $val;
  -ms-transform: $val;
  transform: $val;
}


/// Generates the property `user-select` as well as each necessary
/// vendor prefix.
///
/// @param $val - The value of the user-select property.
@mixin user-select($val) {
  -webkit-user-select: $val;
  -moz-user-select: $val;
  -ms-user-select: $val;
  -o-user-select: $val;
  user-select: $val;
}



//----------------------------------------------------------------------------------//
// Placeholders                                                                     //
//----------------------------------------------------------------------------------//


/// Causes any inheriting children to be completely absent from print media.
/// @see {mixin} remove-from-print
%remove-from-print {
  @include remove-from-print();
}
